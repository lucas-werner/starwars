{"ast":null,"code":"import _toArray from \"/home/lucaswerner/repositories/github-personal/starwars/node_modules/@babel/runtime/helpers/esm/toArray\";\nimport _slicedToArray from \"/home/lucaswerner/repositories/github-personal/starwars/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"/home/lucaswerner/repositories/github-personal/starwars/src/context/StarWarsContext.jsx\";\nimport React, { createContext, useState, useEffect } from 'react';\nimport PropTypes from 'prop-types';\nexport const StarWarsContext = createContext();\nexport const filterAll = (name, results, numericValues = {}) => {\n  const column = numericValues.column,\n        comparison = numericValues.comparison,\n        value = numericValues.value;\n  const filtered = name ? results.filter(planet => planet.name.toLowerCase().match(name)) : results;\n\n  switch (comparison) {\n    case 'Maior que':\n      return filtered.filter(planet => parseInt(planet[column], 10) > parseInt(value, 10));\n\n    case 'Menor que':\n      return filtered.filter(planet => parseInt(planet[column], 10) < parseInt(value, 10));\n\n    case 'Igual a':\n      return filtered.filter(planet => parseInt(planet[column], 10) === parseInt(value, 10));\n\n    default:\n      return filtered;\n  }\n};\n\nfunction sortPlanets(filteredResults, column, order) {\n  const sortedPlanets = filteredResults.sort((a, b) => a[column] - b[column] || a[column].toString().localeCompare(b[column].toString()));\n  if (order === 'DESC') return sortedPlanets.reverse();\n  return sortedPlanets;\n}\n\nexport const StarWarsProvider = ({\n  children\n}) => {\n  const _useState = useState(''),\n        _useState2 = _slicedToArray(_useState, 2),\n        input = _useState2[0],\n        setInput = _useState2[1];\n\n  const _useState3 = useState([]),\n        _useState4 = _slicedToArray(_useState3, 2),\n        data = _useState4[0],\n        setData = _useState4[1];\n\n  const _useState5 = useState([]),\n        _useState6 = _slicedToArray(_useState5, 2),\n        filteredData = _useState6[0],\n        setFilteredData = _useState6[1];\n\n  const _useState7 = useState([{\n    name: input\n  }]),\n        _useState8 = _slicedToArray(_useState7, 2),\n        filters = _useState8[0],\n        setFilters = _useState8[1];\n\n  const _useState9 = useState({\n    column: '',\n    comparison: '',\n    value: ''\n  }),\n        _useState10 = _slicedToArray(_useState9, 2),\n        numericFilter = _useState10[0],\n        setNumericFilter = _useState10[1];\n\n  const _useState11 = useState({\n    column: 'name',\n    order: 'ASC'\n  }),\n        _useState12 = _slicedToArray(_useState11, 2),\n        sortColumns = _useState12[0],\n        setSortColumns = _useState12[1];\n\n  const _filters = _toArray(filters),\n        rest = _filters.slice(1);\n\n  const filterByName = () => {\n    let filteredResults = data;\n\n    if (rest.length) {\n      rest.forEach(({\n        numericValues\n      }) => {\n        filteredResults = filterAll(input, filteredResults, numericValues);\n      });\n    } else {\n      filteredResults = filterAll(input, filteredResults);\n    }\n\n    const column = sortColumns.column,\n          order = sortColumns.order;\n    filteredResults = sortPlanets(filteredResults, column, order);\n    setFilteredData(filteredResults);\n    setFilters([{\n      name: input\n    }, ...rest]);\n  };\n\n  useEffect(() => {\n    filterByName();\n  }, [input, rest.length, sortColumns]);\n  const context = {\n    input,\n    setInput,\n    filters,\n    data,\n    setData,\n    filteredData,\n    setFilteredData,\n    setFilters,\n    numericFilter,\n    setNumericFilter,\n    sortColumns,\n    setSortColumns\n  };\n  return React.createElement(StarWarsContext.Provider, {\n    value: context,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 79\n    },\n    __self: this\n  }, children);\n};\nStarWarsProvider.propTypes = {\n  children: PropTypes.node.isRequired\n};","map":{"version":3,"sources":["/home/lucaswerner/repositories/github-personal/starwars/src/context/StarWarsContext.jsx"],"names":["React","createContext","useState","useEffect","PropTypes","StarWarsContext","filterAll","name","results","numericValues","column","comparison","value","filtered","filter","planet","toLowerCase","match","parseInt","sortPlanets","filteredResults","order","sortedPlanets","sort","a","b","toString","localeCompare","reverse","StarWarsProvider","children","input","setInput","data","setData","filteredData","setFilteredData","filters","setFilters","numericFilter","setNumericFilter","sortColumns","setSortColumns","rest","filterByName","length","forEach","context","propTypes","node","isRequired"],"mappings":"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","sourcesContent":["import React, { createContext, useState, useEffect } from 'react';\nimport PropTypes from 'prop-types';\n\nexport const StarWarsContext = createContext();\n\nexport const filterAll = (name, results, numericValues = {}) => {\n  const { column, comparison, value } = numericValues;\n  const filtered = name\n    ? results.filter((planet) => planet.name.toLowerCase().match(name))\n    : results;\n  switch (comparison) {\n    case 'Maior que':\n      return filtered.filter((planet) => parseInt(planet[column], 10) > parseInt(value, 10));\n    case 'Menor que':\n      return filtered.filter((planet) => parseInt(planet[column], 10) < parseInt(value, 10));\n    case 'Igual a':\n      return filtered.filter((planet) => parseInt(planet[column], 10) === parseInt(value, 10));\n    default: return filtered;\n  }\n};\n\nfunction sortPlanets(filteredResults, column, order) {\n  const sortedPlanets = filteredResults.sort((a, b) => a[column] - b[column]\n    || a[column].toString().localeCompare(b[column].toString()));\n  if (order === 'DESC') return sortedPlanets.reverse();\n  return sortedPlanets;\n}\n\nexport const StarWarsProvider = ({ children }) => {\n  const [input, setInput] = useState('');\n  const [data, setData] = useState([]);\n  const [filteredData, setFilteredData] = useState([]);\n  const [filters, setFilters] = useState([\n    { name: input },\n  ]);\n  const [numericFilter, setNumericFilter] = useState({\n    column: '',\n    comparison: '',\n    value: '',\n  });\n  const [sortColumns, setSortColumns] = useState({ column: 'name', order: 'ASC' });\n\n  const [, ...rest] = filters;\n  const filterByName = () => {\n    let filteredResults = data;\n    if (rest.length) {\n      rest.forEach(({ numericValues }) => {\n        filteredResults = filterAll(input, filteredResults, numericValues);\n      });\n    } else {\n      filteredResults = filterAll(input, filteredResults);\n    }\n    const { column, order } = sortColumns;\n    filteredResults = sortPlanets(filteredResults, column, order);\n    setFilteredData(filteredResults);\n    setFilters([{ name: input }, ...rest]);\n  };\n\n  useEffect(() => {\n    filterByName();\n  }, [input, rest.length, sortColumns]);\n\n  const context = {\n    input,\n    setInput,\n    filters,\n    data,\n    setData,\n    filteredData,\n    setFilteredData,\n    setFilters,\n    numericFilter,\n    setNumericFilter,\n    sortColumns,\n    setSortColumns,\n  };\n\n  return (\n    <StarWarsContext.Provider value={context}>\n      {children}\n    </StarWarsContext.Provider>\n  );\n};\n\nStarWarsProvider.propTypes = {\n  children: PropTypes.node.isRequired,\n};\n"]},"metadata":{},"sourceType":"module"}