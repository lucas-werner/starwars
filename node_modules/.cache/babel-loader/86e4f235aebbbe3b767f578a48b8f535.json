{"ast":null,"code":"import _toConsumableArray from\"/home/lucaswerner/repositories/github-personal/starwars/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";import _toArray from\"/home/lucaswerner/repositories/github-personal/starwars/node_modules/@babel/runtime/helpers/esm/toArray\";import _slicedToArray from\"/home/lucaswerner/repositories/github-personal/starwars/node_modules/@babel/runtime/helpers/esm/slicedToArray\";import React,{createContext,useState,useEffect}from'react';export var StarWarsContext=createContext();export var filterAll=function filterAll(name,results){var numericValues=arguments.length>2&&arguments[2]!==undefined?arguments[2]:{};var column=numericValues.column,comparison=numericValues.comparison,value=numericValues.value;var filtered=name?results.filter(function(planet){return planet.name.toLowerCase().match(name);}):results;switch(comparison){case'Maior que':return filtered.filter(function(planet){return parseInt(planet[column],10)>parseInt(value,10);});case'Menor que':return filtered.filter(function(planet){return parseInt(planet[column],10)<parseInt(value,10);});case'Igual a':return filtered.filter(function(planet){return parseInt(planet[column],10)===parseInt(value,10);});default:return filtered;}};function sortPlanets(filteredResults,column,order){var sortedPlanets=filteredResults.sort(function(a,b){return a[column]-b[column]||a[column].toString().localeCompare(b[column].toString());});if(order==='DESC')return sortedPlanets.reverse();return sortedPlanets;}export var StarWarsProvider=function StarWarsProvider(_ref){var children=_ref.children;var _useState=useState(''),_useState2=_slicedToArray(_useState,2),input=_useState2[0],setInput=_useState2[1];var _useState3=useState([]),_useState4=_slicedToArray(_useState3,2),data=_useState4[0],setData=_useState4[1];var _useState5=useState([]),_useState6=_slicedToArray(_useState5,2),filteredData=_useState6[0],setFilteredData=_useState6[1];var _useState7=useState([{name:input}]),_useState8=_slicedToArray(_useState7,2),filters=_useState8[0],setFilters=_useState8[1];var _useState9=useState({column:'',comparison:'',value:''}),_useState10=_slicedToArray(_useState9,2),numericFilter=_useState10[0],setNumericFilter=_useState10[1];var _useState11=useState({column:'name',order:'ASC'}),_useState12=_slicedToArray(_useState11,2),sortColumns=_useState12[0],setSortColumns=_useState12[1];var _filters=_toArray(filters),rest=_filters.slice(1);var filterByName=function filterByName(){var filteredResults=data;if(rest.length){rest.forEach(function(_ref2){var numericValues=_ref2.numericValues;filteredResults=filterAll(input,filteredResults,numericValues);});}else{filteredResults=filterAll(input,filteredResults);}var column=sortColumns.column,order=sortColumns.order;filteredResults=sortPlanets(filteredResults,column,order);setFilteredData(filteredResults);setFilters([{name:input}].concat(_toConsumableArray(rest)));};useEffect(function(){filterByName();},[input,rest.length,sortColumns]);var context={input:input,setInput:setInput,filters:filters,data:data,setData:setData,filteredData:filteredData,setFilteredData:setFilteredData,setFilters:setFilters,numericFilter:numericFilter,setNumericFilter:setNumericFilter,sortColumns:sortColumns,setSortColumns:setSortColumns};return React.createElement(StarWarsContext.Provider,{value:context},children);};","map":{"version":3,"sources":["/home/lucaswerner/repositories/github-personal/starwars/src/context/StarWarsContext.jsx"],"names":["React","createContext","useState","useEffect","StarWarsContext","filterAll","name","results","numericValues","column","comparison","value","filtered","filter","planet","toLowerCase","match","parseInt","sortPlanets","filteredResults","order","sortedPlanets","sort","a","b","toString","localeCompare","reverse","StarWarsProvider","children","input","setInput","data","setData","filteredData","setFilteredData","filters","setFilters","numericFilter","setNumericFilter","sortColumns","setSortColumns","rest","filterByName","length","forEach","context"],"mappings":"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","sourcesContent":["import React, { createContext, useState, useEffect } from 'react';\nimport PropTypes from 'prop-types';\n\nexport const StarWarsContext = createContext();\n\nexport const filterAll = (name, results, numericValues = {}) => {\n  const { column, comparison, value } = numericValues;\n  const filtered = name\n    ? results.filter((planet) => planet.name.toLowerCase().match(name))\n    : results;\n  switch (comparison) {\n    case 'Maior que':\n      return filtered.filter((planet) => parseInt(planet[column], 10) > parseInt(value, 10));\n    case 'Menor que':\n      return filtered.filter((planet) => parseInt(planet[column], 10) < parseInt(value, 10));\n    case 'Igual a':\n      return filtered.filter((planet) => parseInt(planet[column], 10) === parseInt(value, 10));\n    default: return filtered;\n  }\n};\n\nfunction sortPlanets(filteredResults, column, order) {\n  const sortedPlanets = filteredResults.sort((a, b) => a[column] - b[column]\n    || a[column].toString().localeCompare(b[column].toString()));\n  if (order === 'DESC') return sortedPlanets.reverse();\n  return sortedPlanets;\n}\n\nexport const StarWarsProvider = ({ children }) => {\n  const [input, setInput] = useState('');\n  const [data, setData] = useState([]);\n  const [filteredData, setFilteredData] = useState([]);\n  const [filters, setFilters] = useState([\n    { name: input },\n  ]);\n  const [numericFilter, setNumericFilter] = useState({\n    column: '',\n    comparison: '',\n    value: '',\n  });\n  const [sortColumns, setSortColumns] = useState({ column: 'name', order: 'ASC' });\n\n  const [, ...rest] = filters;\n  const filterByName = () => {\n    let filteredResults = data;\n    if (rest.length) {\n      rest.forEach(({ numericValues }) => {\n        filteredResults = filterAll(input, filteredResults, numericValues);\n      });\n    } else {\n      filteredResults = filterAll(input, filteredResults);\n    }\n    const { column, order } = sortColumns;\n    filteredResults = sortPlanets(filteredResults, column, order);\n    setFilteredData(filteredResults);\n    setFilters([{ name: input }, ...rest]);\n  };\n\n  useEffect(() => {\n    filterByName();\n  }, [input, rest.length, sortColumns]);\n\n  const context = {\n    input,\n    setInput,\n    filters,\n    data,\n    setData,\n    filteredData,\n    setFilteredData,\n    setFilters,\n    numericFilter,\n    setNumericFilter,\n    sortColumns,\n    setSortColumns,\n  };\n\n  return (\n    <StarWarsContext.Provider value={context}>\n      {children}\n    </StarWarsContext.Provider>\n  );\n};\n\nStarWarsProvider.propTypes = {\n  children: PropTypes.node.isRequired,\n};\n"]},"metadata":{},"sourceType":"module"}