{"ast":null,"code":"import _slicedToArray from \"/home/lucaswerner/repositories/github-personal/starwars/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"/home/lucaswerner/repositories/github-personal/starwars/src/components/Table.js\";\nimport React, { useState, useContext, useEffect } from 'react';\nimport { StarWarsContext } from '../context/StarWarsContext';\nimport SearchBar from './SearchBar';\nimport Selectors from './Selectors';\nimport './Table.css';\nimport fetchPlanets from '../services/fetchPlanets';\nimport SortButton from './SortButton';\nimport mock from '../mocks/resultsMock';\n\nfunction renderTableHead(planets) {\n  return React.createElement(\"thead\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 12\n    },\n    __self: this\n  }, React.createElement(\"tr\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 13\n    },\n    __self: this\n  }, Object.keys(planets[0] || []).map(key => key === 'residents' ? false : React.createElement(\"th\", {\n    key: key,\n    className: \"table-head-cell\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 18\n    },\n    __self: this\n  }, key.replace(/_/, ' ').toUpperCase(), React.createElement(SortButton, {\n    currentColumn: key,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 20\n    },\n    __self: this\n  })))));\n}\n\nfunction renderTableBody(planets) {\n  return React.createElement(\"tbody\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 31\n    },\n    __self: this\n  }, planets.map(planet => React.createElement(\"tr\", {\n    key: planet.name,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 33\n    },\n    __self: this\n  }, Object.entries(planet).map(([key, value]) => key === 'residents' ? false : React.createElement(\"td\", {\n    key: value,\n    \"data-testid\": \"planets-infos\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 37\n    },\n    __self: this\n  }, value)))));\n}\n\nconst Table = () => {\n  const _useContext = useContext(StarWarsContext),\n        filteredData = _useContext.filteredData,\n        filters = _useContext.filters,\n        data = _useContext.data,\n        setData = _useContext.setData;\n\n  const _useState = useState(true),\n        _useState2 = _slicedToArray(_useState, 2),\n        isFetching = _useState2[0],\n        setIsFetching = _useState2[1];\n\n  const planets = filters[0].name || filters[1] ? filteredData : data;\n  useEffect(() => {\n    if (!data.length) {\n      fetchPlanets().then(({\n        results\n      }) => {\n        setIsFetching(false);\n        setData(results.sort((a, b) => a.name > b.name ? 1 : -1));\n      }).catch(() => {\n        setIsFetching(false);\n        setData(mock.results);\n      });\n    }\n  }, [data.length, setData]);\n  if (isFetching) return React.createElement(\"div\", {\n    className: \"spinner\",\n    \"data-testid\": \"loading\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 64\n    },\n    __self: this\n  });\n  if (data === 'API fora do ar') return React.createElement(\"div\", {\n    style: {\n      color: 'white'\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 65\n    },\n    __self: this\n  }, data);\n  return React.createElement(\"section\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 67\n    },\n    __self: this\n  }, React.createElement(\"section\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 68\n    },\n    __self: this\n  }, React.createElement(SearchBar, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 68\n    },\n    __self: this\n  })), React.createElement(\"section\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 69\n    },\n    __self: this\n  }, React.createElement(Selectors, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 69\n    },\n    __self: this\n  })), React.createElement(\"table\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 70\n    },\n    __self: this\n  }, renderTableHead(data), renderTableBody(planets)));\n};\n\nexport default Table;","map":{"version":3,"sources":["/home/lucaswerner/repositories/github-personal/starwars/src/components/Table.js"],"names":["React","useState","useContext","useEffect","StarWarsContext","SearchBar","Selectors","fetchPlanets","SortButton","mock","renderTableHead","planets","Object","keys","map","key","replace","toUpperCase","renderTableBody","planet","name","entries","value","Table","filteredData","filters","data","setData","isFetching","setIsFetching","length","then","results","sort","a","b","catch","color"],"mappings":";;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,UAA1B,EAAsCC,SAAtC,QAAuD,OAAvD;AACA,SAASC,eAAT,QAAgC,4BAAhC;AACA,OAAOC,SAAP,MAAsB,aAAtB;AACA,OAAOC,SAAP,MAAsB,aAAtB;AACA,OAAO,aAAP;AACA,OAAOC,YAAP,MAAyB,0BAAzB;AACA,OAAOC,UAAP,MAAuB,cAAvB;AACA,OAAOC,IAAP,MAAiB,sBAAjB;;AAEA,SAASC,eAAT,CAAyBC,OAAzB,EAAkC;AAChC,SACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACGC,MAAM,CAACC,IAAP,CAAYF,OAAO,CAAC,CAAD,CAAP,IAAc,EAA1B,EAA8BG,GAA9B,CAAmCC,GAAD,IACjCA,GAAG,KAAK,WAAR,GACI,KADJ,GAGI;AAAI,IAAA,GAAG,EAAEA,GAAT;AAAc,IAAA,SAAS,EAAC,iBAAxB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACGA,GAAG,CAACC,OAAJ,CAAY,GAAZ,EAAiB,GAAjB,EAAsBC,WAAtB,EADH,EAEE,oBAAC,UAAD;AAAY,IAAA,aAAa,EAAEF,GAA3B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAFF,CAJL,CADH,CADF,CADF;AAgBD;;AAED,SAASG,eAAT,CAAyBP,OAAzB,EAAkC;AAChC,SACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACGA,OAAO,CAACG,GAAR,CAAaK,MAAD,IACX;AAAI,IAAA,GAAG,EAAEA,MAAM,CAACC,IAAhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACGR,MAAM,CAACS,OAAP,CAAeF,MAAf,EAAuBL,GAAvB,CAA2B,CAAC,CAACC,GAAD,EAAMO,KAAN,CAAD,KAC1BP,GAAG,KAAK,WAAR,GACI,KADJ,GAEI;AAAI,IAAA,GAAG,EAAEO,KAAT;AAAgB,mBAAY,eAA5B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAA6CA,KAA7C,CAHL,CADH,CADD,CADH,CADF;AAaD;;AAED,MAAMC,KAAK,GAAG,MAAM;AAAA,sBAC+BrB,UAAU,CAACE,eAAD,CADzC;AAAA,QACVoB,YADU,eACVA,YADU;AAAA,QACIC,OADJ,eACIA,OADJ;AAAA,QACaC,IADb,eACaA,IADb;AAAA,QACmBC,OADnB,eACmBA,OADnB;;AAAA,oBAEkB1B,QAAQ,CAAC,IAAD,CAF1B;AAAA;AAAA,QAEX2B,UAFW;AAAA,QAECC,aAFD;;AAGlB,QAAMlB,OAAO,GAAIc,OAAO,CAAC,CAAD,CAAP,CAAWL,IAAX,IAAmBK,OAAO,CAAC,CAAD,CAA3B,GAAkCD,YAAlC,GAAiDE,IAAjE;AAEAvB,EAAAA,SAAS,CAAC,MAAM;AACd,QAAI,CAACuB,IAAI,CAACI,MAAV,EAAkB;AAChBvB,MAAAA,YAAY,GACTwB,IADH,CACQ,CAAC;AAAEC,QAAAA;AAAF,OAAD,KAAiB;AACrBH,QAAAA,aAAa,CAAC,KAAD,CAAb;AACAF,QAAAA,OAAO,CAACK,OAAO,CAACC,IAAR,CAAa,CAACC,CAAD,EAAIC,CAAJ,KAAWD,CAAC,CAACd,IAAF,GAASe,CAAC,CAACf,IAAX,GAAkB,CAAlB,GAAsB,CAAC,CAA/C,CAAD,CAAP;AACD,OAJH,EAKGgB,KALH,CAKS,MAAM;AACXP,QAAAA,aAAa,CAAC,KAAD,CAAb;AACAF,QAAAA,OAAO,CAAClB,IAAI,CAACuB,OAAN,CAAP;AACD,OARH;AASD;AACF,GAZQ,EAYN,CAACN,IAAI,CAACI,MAAN,EAAcH,OAAd,CAZM,CAAT;AAcA,MAAIC,UAAJ,EAAgB,OAAO;AAAK,IAAA,SAAS,EAAC,SAAf;AAAyB,mBAAY,SAArC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAAP;AAChB,MAAIF,IAAI,KAAK,gBAAb,EAA+B,OAAO;AAAK,IAAA,KAAK,EAAE;AAAEW,MAAAA,KAAK,EAAE;AAAT,KAAZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAiCX,IAAjC,CAAP;AAC/B,SACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAS,oBAAC,SAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAAT,CADF,EAEE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAS,oBAAC,SAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAAT,CAFF,EAGE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACGhB,eAAe,CAACgB,IAAD,CADlB,EAEGR,eAAe,CAACP,OAAD,CAFlB,CAHF,CADF;AAUD,CA/BD;;AAiCA,eAAeY,KAAf","sourcesContent":["import React, { useState, useContext, useEffect } from 'react';\nimport { StarWarsContext } from '../context/StarWarsContext';\nimport SearchBar from './SearchBar';\nimport Selectors from './Selectors';\nimport './Table.css';\nimport fetchPlanets from '../services/fetchPlanets';\nimport SortButton from './SortButton';\nimport mock from '../mocks/resultsMock';\n\nfunction renderTableHead(planets) {\n  return (\n    <thead>\n      <tr>\n        {Object.keys(planets[0] || []).map((key) => (\n          key === 'residents'\n            ? false\n            : (\n              <th key={key} className=\"table-head-cell\">\n                {key.replace(/_/, ' ').toUpperCase()}\n                <SortButton currentColumn={key} />\n              </th>\n            )\n        ))}\n      </tr>\n    </thead>\n  );\n}\n\nfunction renderTableBody(planets) {\n  return (\n    <tbody>\n      {planets.map((planet) => (\n        <tr key={planet.name}>\n          {Object.entries(planet).map(([key, value]) => (\n            key === 'residents'\n              ? false\n              : <td key={value} data-testid=\"planets-infos\">{value}</td>\n          ))}\n        </tr>\n      ))}\n    </tbody>\n  );\n}\n\nconst Table = () => {\n  const { filteredData, filters, data, setData } = useContext(StarWarsContext);\n  const [isFetching, setIsFetching] = useState(true);\n  const planets = (filters[0].name || filters[1]) ? filteredData : data;\n\n  useEffect(() => {\n    if (!data.length) {\n      fetchPlanets()\n        .then(({ results }) => {\n          setIsFetching(false);\n          setData(results.sort((a, b) => (a.name > b.name ? 1 : -1)));\n        })\n        .catch(() => {\n          setIsFetching(false);\n          setData(mock.results);\n        });\n    }\n  }, [data.length, setData]);\n\n  if (isFetching) return <div className=\"spinner\" data-testid=\"loading\" />;\n  if (data === 'API fora do ar') return <div style={{ color: 'white' }}>{data}</div>;\n  return (\n    <section>\n      <section><SearchBar /></section>\n      <section><Selectors /></section>\n      <table>\n        {renderTableHead(data)}\n        {renderTableBody(planets)}\n      </table>\n    </section>\n  );\n};\n\nexport default Table;\n"]},"metadata":{},"sourceType":"module"}