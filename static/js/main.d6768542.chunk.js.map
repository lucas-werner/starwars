{"version":3,"sources":["images/sw_logo2.png","context/StarWarsContext.jsx","components/SearchBar.js","components/ColumnSelector.js","components/ComparisonSelector.js","components/NumberSelector.js","components/FilterButton.js","components/FiltersList.js","components/Selectors.js","services/fetchPlanets.js","components/SortButton.js","mocks/resultsMock.js","components/Table.js","App.js","index.js"],"names":["module","exports","StarWarsContext","createContext","filterAll","name","results","numericValues","column","comparison","value","filtered","filter","planet","toLowerCase","match","parseInt","StarWarsProvider","children","useState","input","setInput","data","setData","filteredData","setFilteredData","filters","setFilters","numericFilter","setNumericFilter","order","sortColumns","setSortColumns","rest","useEffect","filteredResults","length","forEach","sortedPlanets","sort","a","b","toString","localeCompare","reverse","sortPlanets","filterByName","context","Provider","SearchBar","useContext","className","onChange","target","id","required","htmlFor","ColumnSelector","selectedColumn","map","el","data-testid","label","element","includes","key","replace","ComparisonSelector","NumberSelector","type","FilterButton","undefined","disabled","FiltersList","onClick","currentColumn","remainedColumns","deleteFilter","Selectors","onSubmit","e","preventDefault","reset","fetchPlanets","fetch","then","response","json","SortButton","resultsMock","rotation_period","orbital_period","diameter","climate","gravity","terrain","surface_water","population","residents","films","created","edited","url","Table","isFetching","setIsFetching","planets","catch","mock","style","color","Object","keys","toUpperCase","renderTableHead","entries","renderTableBody","App","src","starWarsLogo","alt","React","Component","ReactDOM","render","basename","exact","path","component","document","getElementById"],"mappings":"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","file":"static/js/main.d6768542.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/sw_logo2.c6f69db5.png\";","import React, { createContext, useState, useEffect } from 'react';\nimport PropTypes from 'prop-types';\n\nexport const StarWarsContext = createContext();\n\nexport const filterAll = (name, results, numericValues = {}) => {\n  const { column, comparison, value } = numericValues;\n  const filtered = name\n    ? results.filter((planet) => planet.name.toLowerCase().match(name))\n    : results;\n  switch (comparison) {\n    case 'Maior que':\n      return filtered.filter((planet) => parseInt(planet[column], 10) > parseInt(value, 10));\n    case 'Menor que':\n      return filtered.filter((planet) => parseInt(planet[column], 10) < parseInt(value, 10));\n    case 'Igual a':\n      return filtered.filter((planet) => parseInt(planet[column], 10) === parseInt(value, 10));\n    default: return filtered;\n  }\n};\n\nfunction sortPlanets(filteredResults, column, order) {\n  const sortedPlanets = filteredResults.sort((a, b) => a[column] - b[column]\n    || a[column].toString().localeCompare(b[column].toString()));\n  if (order === 'DESC') return sortedPlanets.reverse();\n  return sortedPlanets;\n}\n\nexport const StarWarsProvider = ({ children }) => {\n  const [input, setInput] = useState('');\n  const [data, setData] = useState([]);\n  const [filteredData, setFilteredData] = useState([]);\n  const [filters, setFilters] = useState([\n    { name: input },\n  ]);\n  const [numericFilter, setNumericFilter] = useState({\n    column: '',\n    comparison: '',\n    value: '',\n  });\n  const [sortColumns, setSortColumns] = useState({ column: 'name', order: 'ASC' });\n\n  const [, ...rest] = filters;\n  const filterByName = () => {\n    let filteredResults = data;\n    if (rest.length) {\n      rest.forEach(({ numericValues }) => {\n        filteredResults = filterAll(input, filteredResults, numericValues);\n      });\n    } else {\n      filteredResults = filterAll(input, filteredResults);\n    }\n    const { column, order } = sortColumns;\n    filteredResults = sortPlanets(filteredResults, column, order);\n    setFilteredData(filteredResults);\n    setFilters([{ name: input }, ...rest]);\n  };\n\n  useEffect(() => {\n    filterByName();\n  }, [input, rest.length, sortColumns]);\n\n  const context = {\n    input,\n    setInput,\n    filters,\n    data,\n    setData,\n    filteredData,\n    setFilteredData,\n    setFilters,\n    numericFilter,\n    setNumericFilter,\n    sortColumns,\n    setSortColumns,\n  };\n\n  return (\n    <StarWarsContext.Provider value={context}>\n      {children}\n    </StarWarsContext.Provider>\n  );\n};\n\nStarWarsProvider.propTypes = {\n  children: PropTypes.node.isRequired,\n};\n","import React, { useContext } from 'react';\nimport './SearchBar.css';\nimport { StarWarsContext } from '../context/StarWarsContext';\n\nconst SearchBar = () => {\n  const { setInput } = useContext(StarWarsContext);\n\n  return (\n    <div className=\"group search-bar\">\n      <input onChange={({ target: { value } }) => setInput(value)} id=\"search-bar\" required />\n      <span className=\"highlight\" />\n      <span className=\"bar\" />\n      <label htmlFor=\"search-bar\">Search by planet name</label>\n    </div>\n  );\n};\n\nexport default SearchBar;\n","import React, { useContext } from 'react';\nimport { StarWarsContext } from '../context/StarWarsContext';\n\nconst ColumnSelector = () => {\n  const { filters, numericFilter, setNumericFilter } = useContext(StarWarsContext);\n  const columns = ['rotation_period', 'orbital_period', 'diameter', 'surface_water', 'population'];\n  const selectedColumn = filters.map((el) => (\n    el.numericValues ? el.numericValues.column : false));\n  return (\n    <div>\n      <span className=\"selector-label\">Choose a column:</span>\n      <select\n        name=\"column\"\n        data-testid=\"column-selector\"\n        onChange={({\n          target: { name, value },\n        }) => setNumericFilter({ ...numericFilter, [name]: value })}\n        required\n      >\n        <option value=\"\" label=\" \" />\n        {columns.map((element) => (\n          selectedColumn.includes(element)\n            ? false\n            : <option value={element} key={element}>{element.replace('_', ' ')}</option>\n        ))}\n      </select>\n    </div>\n  );\n};\n\nexport default ColumnSelector;\n","import React, { useContext } from 'react';\nimport { StarWarsContext } from '../context/StarWarsContext';\n\nconst ComparisonSelector = () => {\n  const { numericFilter, setNumericFilter } = useContext(StarWarsContext);\n  return (\n    <div>\n      <span className=\"selector-label\">Choose a comparison:</span>\n      <select\n        name=\"comparison\"\n        data-testid=\"comparison-selector\"\n        onChange={({\n          target: { name, value },\n        }) => setNumericFilter({ ...numericFilter, [name]: value })}\n        required\n      >\n        <option value=\"\" label=\" \" />\n        <option value=\"Maior que\">Maior que</option>\n        <option value=\"Menor que\">Menor que</option>\n        <option value=\"Igual a\">Igual a</option>\n      </select>\n    </div>\n  );\n};\n\nexport default ComparisonSelector;\n","import React, { useContext } from 'react';\nimport { StarWarsContext } from '../context/StarWarsContext';\n\nconst NumberSelector = () => {\n  const { numericFilter, setNumericFilter } = useContext(StarWarsContext);\n  return (\n    <div className=\"group number-selector\">\n      <input\n        type=\"number\"\n        name=\"value\"\n        onChange={({\n          target: { name, value },\n        }) => setNumericFilter({ ...numericFilter, [name]: value })}\n        required\n        id=\"number-bar\"\n      />\n      <span className=\"highlight\" />\n      <span className=\"bar\" />\n      <label htmlFor=\"number-bar\">Type a number</label>\n    </div>\n  );\n};\n\nexport default NumberSelector;\n","import React, { useContext } from 'react';\nimport { StarWarsContext } from '../context/StarWarsContext';\n\nconst FilterButton = () => {\n  const { numericFilter } = useContext(StarWarsContext);\n  const { column, comparison, value } = numericFilter;\n  return (\n    <input\n      type=\"submit\"\n      value=\"Filtrar\"\n      className={!(column && comparison && value) ? 'filter-button-disabled' : undefined}\n      data-testid=\"filter-button\"\n      disabled={!(column && comparison && value)}\n    />\n  );\n};\n\nexport default FilterButton;\n","import React, { useContext } from 'react';\nimport { StarWarsContext } from '../context/StarWarsContext';\n\nconst FiltersList = () => {\n  const { filters, setFilters } = useContext(StarWarsContext);\n  const [, ...rest] = filters;\n\n  function deleteFilter(currentColumn) {\n    const remainedColumns = rest\n      .filter(({ numericValues: { column } }) => column !== currentColumn);\n    setFilters([filters[0], ...remainedColumns]);\n  }\n\n  return (\n    <section>\n      {rest.map(({ numericValues: { column, comparison, value } }) => (\n        <div className=\"column-filters\" key={column}>\n          <p className=\"column-filter\" name={column}>{`☉ ${column.replace('_', ' ')} ${comparison.toLowerCase()} ${value}`}</p>\n          <button\n            type=\"button\"\n            data-testid=\"delete-button\"\n            name={column}\n            onClick={() => {\n              deleteFilter(column);\n            }}\n          >\n            X\n          </button>\n        </div>\n      ))}\n    </section>\n  );\n};\n\nexport default FiltersList;\n","import React, { useContext } from 'react';\nimport './Selectors.css';\nimport ColumnSelector from './ColumnSelector';\nimport ComparisonSelector from './ComparisonSelector';\nimport NumberSelector from './NumberSelector';\nimport FilterButton from './FilterButton';\nimport FiltersList from './FiltersList';\nimport { StarWarsContext } from '../context/StarWarsContext';\n\nconst Selectors = () => {\n  const { filters, numericFilter, setNumericFilter, setFilters } = useContext(StarWarsContext);\n  const { column, comparison, value } = numericFilter;\n  function handleSubmit(e) {\n    e.preventDefault();\n    e.target.reset();\n    setFilters([...filters, { numericValues: { column, comparison, value } }]);\n    setNumericFilter({ column: '', comparison: '', value: '' });\n  }\n  return (\n    <div>\n      <form className=\"numericForm\" onSubmit={handleSubmit}>\n        <section className=\"numeric-section\">\n          <ColumnSelector />\n          <ComparisonSelector />\n          <NumberSelector />\n        </section>\n        <section>\n          <FilterButton />\n        </section>\n      </form>\n      <FiltersList />\n    </div>\n  );\n};\n\nexport default Selectors;\n","const SWAPI = 'https://swapi-trybe.herokuapp.com/api/planets';\n\nconst fetchPlanets = () => (\n  fetch(SWAPI).then((response) => response.json()).then((results) => results)\n);\n\nexport default fetchPlanets;\n","import React, { useContext } from 'react';\nimport PropTypes from 'prop-types';\nimport { StarWarsContext } from '../context/StarWarsContext';\n\nconst SortButton = ({ currentColumn }) => {\n  const { sortColumns, setSortColumns } = useContext(StarWarsContext);\n  const { order } = sortColumns;\n  return (\n    <button\n      type=\"button\"\n      data-testid=\"sort-button\"\n      className=\"sort-button\"\n      onClick={() => {\n        setSortColumns(\n          { column: currentColumn, order: order === 'DESC' ? 'ASC' : 'DESC' },\n        );\n      }}\n    >\n      ⇵\n    </button>\n  );\n};\n\nSortButton.propTypes = {\n  currentColumn: PropTypes.string.isRequired,\n};\n\nexport default SortButton;\n","const resultsMock = {\n  results: [\n    {\n      name: 'Bespin', rotation_period: '12', orbital_period: '5110', diameter: '118000', climate: 'temperate', gravity: '1.5 (surface), 1 standard (Cloud City)', terrain: 'gas giant', surface_water: '0', population: '6000000', residents: ['https://swapi-trybe.herokuapp.com/api/people/26/'], films: ['https://swapi-trybe.herokuapp.com/api/films/2/'], created: '2014-12-10T11:43:55.240000Z', edited: '2014-12-20T20:58:18.427000Z', url: 'https://swapi-trybe.herokuapp.com/api/planets/6/',\n    }, {\n      name: 'Endor', rotation_period: '18', orbital_period: '402', diameter: '4900', climate: 'temperate', gravity: '0.85 standard', terrain: 'forests, mountains, lakes', surface_water: '8', population: '30000000', residents: ['https://swapi-trybe.herokuapp.com/api/people/30/'], films: ['https://swapi-trybe.herokuapp.com/api/films/3/'], created: '2014-12-10T11:50:29.349000Z', edited: '2014-12-20T20:58:18.429000Z', url: 'https://swapi-trybe.herokuapp.com/api/planets/7/',\n    }, {\n      name: 'Tatooine', rotation_period: '23', orbital_period: '304', diameter: '10465', climate: 'arid', gravity: '1 standard', terrain: 'desert', surface_water: '1', population: '200000', residents: ['https://swapi-trybe.herokuapp.com/api/people/1/', 'https://swapi-trybe.herokuapp.com/api/people/2/', 'https://swapi-trybe.herokuapp.com/api/people/4/', 'https://swapi-trybe.herokuapp.com/api/people/6/', 'https://swapi-trybe.herokuapp.com/api/people/7/', 'https://swapi-trybe.herokuapp.com/api/people/8/', 'https://swapi-trybe.herokuapp.com/api/people/9/', 'https://swapi-trybe.herokuapp.com/api/people/11/', 'https://swapi-trybe.herokuapp.com/api/people/43/', 'https://swapi-trybe.herokuapp.com/api/people/62/'], films: ['https://swapi-trybe.herokuapp.com/api/films/1/', 'https://swapi-trybe.herokuapp.com/api/films/3/', 'https://swapi-trybe.herokuapp.com/api/films/4/', 'https://swapi-trybe.herokuapp.com/api/films/5/', 'https://swapi-trybe.herokuapp.com/api/films/6/'], created: '2014-12-09T13:50:49.641000Z', edited: '2014-12-20T20:58:18.411000Z', url: 'https://swapi-trybe.herokuapp.com/api/planets/1/',\n    }, {\n      name: 'Hoth', rotation_period: '23', orbital_period: '549', diameter: '7200', climate: 'frozen', gravity: '1.1 standard', terrain: 'tundra, ice caves, mountain ranges', surface_water: '100', population: 'unknown', residents: [], films: ['https://swapi-trybe.herokuapp.com/api/films/2/'], created: '2014-12-10T11:39:13.934000Z', edited: '2014-12-20T20:58:18.423000Z', url: 'https://swapi-trybe.herokuapp.com/api/planets/4/',\n    }, {\n      name: 'Dagobah', rotation_period: '23', orbital_period: '341', diameter: '8900', climate: 'murky', gravity: 'N/A', terrain: 'swamp, jungles', surface_water: '8', population: 'unknown', residents: [], films: ['https://swapi-trybe.herokuapp.com/api/films/2/', 'https://swapi-trybe.herokuapp.com/api/films/3/', 'https://swapi-trybe.herokuapp.com/api/films/6/'], created: '2014-12-10T11:42:22.590000Z', edited: '2014-12-20T20:58:18.425000Z', url: 'https://swapi-trybe.herokuapp.com/api/planets/5/',\n    }, {\n      name: 'Yavin IV', rotation_period: '24', orbital_period: '4818', diameter: '10200', climate: 'temperate, tropical', gravity: '1 standard', terrain: 'jungle, rainforests', surface_water: '8', population: '1000', residents: [], films: ['https://swapi-trybe.herokuapp.com/api/films/1/'], created: '2014-12-10T11:37:19.144000Z', edited: '2014-12-20T20:58:18.421000Z', url: 'https://swapi-trybe.herokuapp.com/api/planets/3/',\n    }, {\n      name: 'Coruscant', rotation_period: '24', orbital_period: '368', diameter: '12240', climate: 'temperate', gravity: '1 standard', terrain: 'cityscape, mountains', surface_water: 'unknown', population: '1000000000000', residents: ['https://swapi-trybe.herokuapp.com/api/people/34/', 'https://swapi-trybe.herokuapp.com/api/people/55/', 'https://swapi-trybe.herokuapp.com/api/people/74/'], films: ['https://swapi-trybe.herokuapp.com/api/films/3/', 'https://swapi-trybe.herokuapp.com/api/films/4/', 'https://swapi-trybe.herokuapp.com/api/films/5/', 'https://swapi-trybe.herokuapp.com/api/films/6/'], created: '2014-12-10T11:54:13.921000Z', edited: '2014-12-20T20:58:18.432000Z', url: 'https://swapi-trybe.herokuapp.com/api/planets/9/',\n    }, {\n      name: 'Alderaan', rotation_period: '24', orbital_period: '364', diameter: '12500', climate: 'temperate', gravity: '1 standard', terrain: 'grasslands, mountains', surface_water: '40', population: '2000000000', residents: ['https://swapi-trybe.herokuapp.com/api/people/5/', 'https://swapi-trybe.herokuapp.com/api/people/68/', 'https://swapi-trybe.herokuapp.com/api/people/81/'], films: ['https://swapi-trybe.herokuapp.com/api/films/1/', 'https://swapi-trybe.herokuapp.com/api/films/6/'], created: '2014-12-10T11:35:48.479000Z', edited: '2014-12-20T20:58:18.420000Z', url: 'https://swapi-trybe.herokuapp.com/api/planets/2/',\n    }, {\n      name: 'Naboo', rotation_period: '26', orbital_period: '312', diameter: '12120', climate: 'temperate', gravity: '1 standard', terrain: 'grassy hills, swamps, forests, mountains', surface_water: '12', population: '4500000000', residents: ['https://swapi-trybe.herokuapp.com/api/people/3/', 'https://swapi-trybe.herokuapp.com/api/people/21/', 'https://swapi-trybe.herokuapp.com/api/people/35/', 'https://swapi-trybe.herokuapp.com/api/people/36/', 'https://swapi-trybe.herokuapp.com/api/people/37/', 'https://swapi-trybe.herokuapp.com/api/people/38/', 'https://swapi-trybe.herokuapp.com/api/people/39/', 'https://swapi-trybe.herokuapp.com/api/people/42/', 'https://swapi-trybe.herokuapp.com/api/people/60/', 'https://swapi-trybe.herokuapp.com/api/people/61/', 'https://swapi-trybe.herokuapp.com/api/people/66/'], films: ['https://swapi-trybe.herokuapp.com/api/films/3/', 'https://swapi-trybe.herokuapp.com/api/films/4/', 'https://swapi-trybe.herokuapp.com/api/films/5/', 'https://swapi-trybe.herokuapp.com/api/films/6/'], created: '2014-12-10T11:52:31.066000Z', edited: '2014-12-20T20:58:18.430000Z', url: 'https://swapi-trybe.herokuapp.com/api/planets/8/',\n    }, {\n      name: 'Kamino', rotation_period: '27', orbital_period: '463', diameter: '19720', climate: 'temperate', gravity: '1 standard', terrain: 'ocean', surface_water: '100', population: '1000000000', residents: ['https://swapi-trybe.herokuapp.com/api/people/22/', 'https://swapi-trybe.herokuapp.com/api/people/72/', 'https://swapi-trybe.herokuapp.com/api/people/73/'], films: ['https://swapi-trybe.herokuapp.com/api/films/5/'], created: '2014-12-10T12:45:06.577000Z', edited: '2014-12-20T20:58:18.434000Z', url: 'https://swapi-trybe.herokuapp.com/api/planets/10/',\n    }],\n};\n\nexport default resultsMock;\n","import React, { useState, useContext, useEffect } from 'react';\nimport { StarWarsContext } from '../context/StarWarsContext';\nimport SearchBar from './SearchBar';\nimport Selectors from './Selectors';\nimport './Table.css';\nimport fetchPlanets from '../services/fetchPlanets';\nimport SortButton from './SortButton';\nimport mock from '../mocks/resultsMock';\n\nfunction renderTableHead(planets) {\n  return (\n    <thead>\n      <tr>\n        {Object.keys(planets[0] || []).map((key) => (\n          key === 'residents'\n            ? false\n            : (\n              <th key={key} className=\"table-head-cell\">\n                {key.replace(/_/, ' ').toUpperCase()}\n                <SortButton currentColumn={key} />\n              </th>\n            )\n        ))}\n      </tr>\n    </thead>\n  );\n}\n\nfunction renderTableBody(planets) {\n  return (\n    <tbody>\n      {planets.map((planet) => (\n        <tr key={planet.name}>\n          {Object.entries(planet).map(([key, value]) => (\n            key === 'residents'\n              ? false\n              : <td key={value} data-testid=\"planets-infos\">{value}</td>\n          ))}\n        </tr>\n      ))}\n    </tbody>\n  );\n}\n\nconst Table = () => {\n  const { filteredData, filters, data, setData } = useContext(StarWarsContext);\n  const [isFetching, setIsFetching] = useState(true);\n  const planets = (filters[0].name || filters[1]) ? filteredData : data;\n\n  useEffect(() => {\n    if (!data.length) {\n      fetchPlanets()\n        .then(({ results }) => {\n          setIsFetching(false);\n          setData(results.sort((a, b) => (a.name > b.name ? 1 : -1)));\n        })\n        .catch(() => {\n          setIsFetching(false);\n          setData(mock.results);\n        });\n    }\n  }, [data.length, setData]);\n\n  if (isFetching) return <div className=\"spinner\" data-testid=\"loading\" />;\n  if (data === 'API fora do ar') return <div style={{ color: 'white' }}>{data}</div>;\n  return (\n    <section>\n      <section><SearchBar /></section>\n      <section><Selectors /></section>\n      <table>\n        {renderTableHead(data)}\n        {renderTableBody(planets)}\n      </table>\n    </section>\n  );\n};\n\nexport default Table;\n","import React from 'react';\nimport starWarsLogo from './images/sw_logo2.png';\nimport Table from './components/Table';\nimport { StarWarsProvider } from './context/StarWarsContext';\nimport './App.css';\n\nclass App extends React.Component {\n  render() {\n    return (\n      <StarWarsProvider>\n        <div className=\"background\">\n          <header>\n            <div>\n              <img src={starWarsLogo} alt=\"star wars logo\" className=\"sw-logo\" />\n            </div>\n            <div>\n              <h1 className=\"title\">PLANETS DATATABLE</h1>\n            </div>\n          </header>\n          <section>\n            <Table />\n          </section>\n        </div>\n      </StarWarsProvider>\n    );\n  }\n}\n\nexport default App;\n","import React from 'react';\nimport { BrowserRouter as Router, Route } from 'react-router-dom'\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(<Router basename='/starwars'><Route exact path='/' component={App} /></Router>, document.getElementById('root'));\n"],"sourceRoot":""}